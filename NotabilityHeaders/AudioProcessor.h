/*
* This header is generated by classdump-dyld 1.0
* on Saturday, January 7, 2023 at 9:05:13 PM Indochina Time
* Operating System: Version 10.3.4 (Build 14G61)
* Image Source: /var/containers/Bundle/Application/1CFA07C5-D48B-45F0-A604-A4F98727D809/Notability.app/Notability
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Notability/Notability-Structs.h>
#import <Notability/AVAudioRecorderDelegate.h>

@class GingerLabsMultibandCompressor, GingerLabsAudioParameters, GingerLabsAudioPlaybackController, NSString;

@interface AudioProcessor : NSObject <AVAudioRecorderDelegate> {

	int audioState;
	AURenderCallbackStruct* audioCallback;
	BOOL rioUnitWasInitialized;
	int unitIsRunning;
	CAStreamBasicDescription thruFormat;
	double hwSampleRate;
	unsigned long hwBufferSize;
	GingerLabsMultibandCompressor* multibandCompressor;
	float deviceConfigCompensationGain;
	float ambientNoiseCompensationGain;
	char isMuted;
	char wasInterrupted;
	char isRecording;
	char shouldDoLiveProcessing;
	char audioSessionIsActive;
	float systemVolume;
	GingerLabsAudioParameters* activeAudioParameters;
	GingerLabsAudioPlaybackController* playbackController;
	opaque_pthread_mutex_t outputCallbackMutex;
	BOOL _isPlaying;
	OpaqueAUGraphRef audioGraph;
	OpaqueAudioComponentInstanceRef iPodTimeUnit;
	OpaqueAudioComponentInstanceRef mixerUnit;
	float _outputVolume;

}

@property (readonly) int audioState; 
@property (assign,nonatomic) BOOL isPlaying;                                                   //@synthesize isPlaying=_isPlaying - In the implementation block
@property (assign,nonatomic) float outputVolume;                                               //@synthesize outputVolume=_outputVolume - In the implementation block
@property (assign) OpaqueAUGraphRef audioGraph; 
@property (assign) OpaqueAudioComponentInstanceRef iPodTimeUnit; 
@property (assign) OpaqueAudioComponentInstanceRef mixerUnit; 
@property (assign) BOOL rioUnitWasInitialized; 
@property (assign) int unitIsRunning; 
@property (assign) AURenderCallbackStruct* audioCallback; 
@property (assign) char isMuted; 
@property (nonatomic,readonly) GingerLabsAudioParameters * activeAudioParameters; 
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)sharedProcessor;
-(float)getExpanderThresholdByBandIndex:(unsigned long)arg1 ;
-(void)setDrcThresholdByBandIndex:(unsigned long)arg1 value:(float)arg2 ;
-(void)setExpanderThresholdByBandIndex:(unsigned long)arg1 value:(float)arg2 ;
-(GingerLabsAudioParameters *)activeAudioParameters;
-(float)getDrcThresholdByBandIndex:(unsigned long)arg1 ;
-(void)setDrcCompensationGainLeftByBandIndex:(unsigned long)arg1 value:(float)arg2 ;
-(void)setDrcCompensationGainRightByBandIndex:(unsigned long)arg1 value:(float)arg2 ;
-(char)hasViableMultibandCompressor;
-(void)audioRecorderEncodeErrorDidOccur:(id)arg1 error:(id)arg2 ;
-(void)stopAudio;
-(char)startAudio;
-(void)postDidRestartNotification;
-(void)initializeAudio;
-(void)configureAudio;
-(void)handleRecordingOrPlaybackNotification:(id)arg1 ;
-(void)mediaServicesDidReset;
-(void)mediaServicesDidFail;
-(void)musicPlayerControllerVolumeDidChange;
-(void)configureRemoteIOAndInitBuffers;
-(void)restartForNewAudioConfigIfNeeded;
-(void)enterPlaybackState;
-(void)setDrcReleaseTimeByBandIndex:(unsigned long)arg1 value:(float)arg2 ;
-(void)returnToLiveAudio;
-(void)prepForRecording;
-(float)getDrcAttackTimeByBandIndex:(unsigned long)arg1 ;
-(float)getDrcReleaseTimeByBandIndex:(unsigned long)arg1 ;
-(float)getDrcCompensationGainByBandIndex:(unsigned long)arg1 ;
-(float)getDrcCompensationGainLeftByBandIndex:(unsigned long)arg1 ;
-(float)getDrcCompensationGainRightByBandIndex:(unsigned long)arg1 ;
-(float)getDrcRatioByBandIndex:(unsigned long)arg1 ;
-(float)getExpanderRatioByBandIndex:(unsigned long)arg1 ;
-(void)setDrcAttackTimeByBandIndex:(unsigned long)arg1 value:(float)arg2 ;
-(void)setDrcCompensationGainByBandIndex:(unsigned long)arg1 value:(float)arg2 ;
-(void)setDrcRatioByBandIndex:(unsigned long)arg1 value:(float)arg2 ;
-(void)setExpanderRatioByBandIndex:(unsigned long)arg1 value:(float)arg2 ;
-(OpaqueAUGraphRef)audioGraph;
-(void)setAudioGraph:(OpaqueAUGraphRef)arg1 ;
-(OpaqueAudioComponentInstanceRef)iPodTimeUnit;
-(void)setIPodTimeUnit:(OpaqueAudioComponentInstanceRef)arg1 ;
-(void)setMixerUnit:(OpaqueAudioComponentInstanceRef)arg1 ;
-(BOOL)rioUnitWasInitialized;
-(void)setRioUnitWasInitialized:(BOOL)arg1 ;
-(int)unitIsRunning;
-(void)setUnitIsRunning:(int)arg1 ;
-(id)init;
-(void)dealloc;
-(void)applicationDidReceiveMemoryWarning:(id)arg1 ;
-(BOOL)isPlaying;
-(void)setIsPlaying:(BOOL)arg1 ;
-(void)beginInterruption;
-(void)endInterruption;
-(float)playbackSpeed;
-(void)setPlaybackSpeed:(float)arg1 ;
-(id)session;
-(void)stopPlayback;
-(char)isMuted;
-(AudioStreamBasicDescription)audioFormat;
-(void)startPlayback;
-(OpaqueAudioComponentInstanceRef)mixerUnit;
-(void)setAudioCallback:(AURenderCallbackStruct*)arg1 ;
-(AURenderCallbackStruct*)audioCallback;
-(void)setIsMuted:(char)arg1 ;
-(int)audioState;
-(void)handleInterruption:(id)arg1 ;
-(void)handleRouteChange:(id)arg1 ;
-(void)setOutputVolume:(float)arg1 ;
-(float)outputVolume;
-(void)setMute:(char)arg1 ;
@end

