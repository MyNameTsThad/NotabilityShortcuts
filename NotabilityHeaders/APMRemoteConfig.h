/*
* This header is generated by classdump-dyld 1.0
* on Saturday, January 7, 2023 at 9:05:16 PM Indochina Time
* Operating System: Version 10.3.4 (Build 14G61)
* Image Source: /var/containers/Bundle/Application/1CFA07C5-D48B-45F0-A604-A4F98727D809/Notability.app/Notability
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSString, APMDatabase, GULMutableDictionary, NSNumberFormatter, APMPBMeasurementConfig;

@interface APMRemoteConfig : NSObject {

	char _isDefaultInstance;
	NSString* _appID;
	APMDatabase* _database;
	GULMutableDictionary* _cachedValueByRemoteConfigKeys;
	GULMutableDictionary* _cachedEventConfigByEventName;
	NSNumberFormatter* _numberFormatter;
	APMPBMeasurementConfig* _remoteConfigProto;

}

@property (nonatomic,readonly) double lastRemoteConfigUpdateTimestamp; 
@property (getter=isExpired,nonatomic,readonly) char expired; 
@property (nonatomic,readonly) long long version; 
@property (getter=isSearchAdReporterEnabled,nonatomic,readonly) char searchAdReporterEnabled; 
@property (nonatomic,readonly) int maxAudienceCount; 
@property (nonatomic,readonly) int maxFiltersPerAudience; 
@property (nonatomic,readonly) int maxFilterResultCount; 
@property (nonatomic,readonly) int maxParametersPerFilter; 
@property (getter=isAudienceDynamicFiltersEnabled,nonatomic,readonly) char audienceDynamicFiltersEnabled; 
@property (nonatomic,readonly) double maxQueueTime; 
@property (nonatomic,readonly) double databaseDeleteStaleBundlesInterval; 
@property (nonatomic,readonly) double adIDCacheTime; 
@property (getter=isIdentifierForVendorCollectionEnabled,nonatomic,readonly) char identifierForVendorCollectionEnabled; 
@property (getter=isIAPSubscriptionNonConsumableReportEnabled,nonatomic,readonly) char IAPSubscriptionNonConsumableReportEnabled; 
@property (getter=isIAPIntroductoryOfferEnabled,nonatomic,readonly) char IAPIntroductoryOfferEnabled; 
@property (nonatomic,readonly) double monitoringSamplePeriod; 
@property (getter=isNetworkBackgroundSessionEnabled,nonatomic,readonly) char networkBackgroundSessionEnabled; 
@property (nonatomic,readonly) double networkTimeout; 
@property (nonatomic,readonly) double sessionDefaultMinimumInterval; 
@property (nonatomic,readonly) double sessionDefaultTimeoutInterval; 
@property (nonatomic,readonly) double sessionEventUserEngagementInterval; 
@property (nonatomic,readonly) char sessionIDEnabled; 
@property (nonatomic,readonly) char sessionImmediateStartEnabled; 
@property (nonatomic,readonly) char sessionBackgroundEnabled; 
@property (nonatomic,readonly) char sessionNumberEnabled; 
@property (nonatomic,readonly) char uploadWhenAppInBackgroundEnabled; 
@property (nonatomic,readonly) char parsePurchaseDataEnabled; 
@property (nonatomic,readonly) char dedupePurchasesEnabled; 
@property (nonatomic,readonly) int maxConversionsPerDay; 
@property (nonatomic,readonly) int maxEventsPerDay; 
@property (nonatomic,readonly) int maxPublicEventsPerDay; 
@property (nonatomic,readonly) int maxErrorEventsPerDay; 
@property (nonatomic,readonly) int maxTrackedCurrencies; 
@property (nonatomic,readonly) int maxEventsStored; 
@property (nonatomic,readonly) int maxBundlesCreatedPerIteration; 
@property (nonatomic,readonly) double uploadingBackoffInterval; 
@property (nonatomic,readonly) double uploadingInterval; 
@property (nonatomic,readonly) double uploadingInitialDelayInterval; 
@property (nonatomic,readonly) long long uploadMaxBundlesLimit; 
@property (nonatomic,readonly) long long uploadMaxEventsPerBundle; 
@property (nonatomic,readonly) long long uploadMaxSizeLimitBytes; 
@property (nonatomic,readonly) int uploadingRetryCount; 
@property (nonatomic,readonly) double uploadingRetryInterval; 
@property (nonatomic,readonly) int maxRealtimeEventCountPerDay; 
@property (nonatomic,readonly) double uploadingDebugModeInterval; 
@property (nonatomic,readonly) double uploadingRealTimeInterval; 
@property (nonatomic,readonly) char blacklistInternal; 
@property (nonatomic,readonly) char blacklistPublic; 
@property (getter=isEventSamplingEnabled,nonatomic,readonly) char eventSamplingEnabled; 
@property (getter=isTimeZoneOffsetEnabled,nonatomic,readonly) char timeZoneOffsetEnabled; 
@property (nonatomic,readonly) int analyticsAccountTimeZoneOffsetMinutes; 
@property (nonatomic,readonly) double remoteConfigCacheTimeInterval; 
@property (getter=isResetAnalyticsDataEnabled,nonatomic,readonly) char resetAnalyticsDataEnabled; 
@property (getter=isScreenViewReporterDelegateEnabled,nonatomic,readonly) char screenViewReporterDelegateEnabled; 
+(id)defaultInstance;
-(char)isAudienceDynamicFiltersEnabled;
-(int)maxAudienceCount;
-(int)maxFilterResultCount;
-(int)maxFiltersPerAudience;
-(int)maxParametersPerFilter;
-(id)initWithAppID:(id)arg1 database:(id)arg2 ;
-(char)isSearchAdReporterEnabled;
-(char)sessionIDEnabled;
-(char)sessionNumberEnabled;
-(char)sessionImmediateStartEnabled;
-(double)uploadingBackoffInterval;
-(double)uploadingInterval;
-(double)uploadingRealTimeInterval;
-(double)uploadingInitialDelayInterval;
-(int)uploadingRetryCount;
-(double)uploadingRetryInterval;
-(double)uploadingDebugModeInterval;
-(int)maxBundlesCreatedPerIteration;
-(long long)uploadMaxBundlesLimit;
-(long long)uploadMaxSizeLimitBytes;
-(char)isNetworkBackgroundSessionEnabled;
-(char)sessionBackgroundEnabled;
-(char)isEventBlacklisted:(id)arg1 ;
-(char)blacklistInternal;
-(char)blacklistPublic;
-(int)maxEventsPerDay;
-(int)maxErrorEventsPerDay;
-(int)maxPublicEventsPerDay;
-(char)isEventCustomConversion:(id)arg1 ;
-(int)maxRealtimeEventCountPerDay;
-(char)isResetAnalyticsDataEnabled;
-(long long)uploadMaxEventsPerBundle;
-(int)maxConversionsPerDay;
-(char)parsePurchaseDataEnabled;
-(char)isEventSamplingEnabled;
-(double)monitoringSamplePeriod;
-(id)remoteConfigURLWithAppInstanceID:(id)arg1 platform:(id)arg2 SDKVersion:(long long)arg3 ;
-(char)updateMeasurementConfig:(id)arg1 ;
-(char)dedupePurchasesEnabled;
-(double)lastRemoteConfigUpdateTimestamp;
-(char)uploadWhenAppInBackgroundEnabled;
-(char)eventHasSamplingRate:(id)arg1 ;
-(int)samplingRateForEvent:(id)arg1 ;
-(int)analyticsAccountTimeZoneOffsetMinutes;
-(char)isTimeZoneOffsetEnabled;
-(id)initWithAppID:(id)arg1 database:(id)arg2 measurementConfig:(id)arg3 ;
-(id)measurementConfigFromDatabase;
-(void)parseRemoteConfigFromMeasurementConfig:(id)arg1 ;
-(id)eventConfigWithName:(id)arg1 ;
-(double)remoteConfigCacheTimeInterval;
-(double)timeIntervalInSecondsFromCacheWithKey:(id)arg1 defaultValue:(double)arg2 maxValue:(double)arg3 minValue:(double)arg4 ;
-(int)intValueFromCacheWithKey:(id)arg1 defaultValue:(int)arg2 maxValue:(int)arg3 minValue:(int)arg4 ;
-(long long)int64ValueFromCacheWithKey:(id)arg1 defaultValue:(long long)arg2 maxValue:(long long)arg3 minValue:(long long)arg4 ;
-(id)cacheValue:(id)arg1 forKey:(id)arg2 ;
-(id)numberFromCacheWithKey:(id)arg1 defaultValue:(id)arg2 maxValue:(id)arg3 minValue:(id)arg4 block:(/*^block*/id)arg5 ;
-(double)databaseDeleteStaleBundlesInterval;
-(double)maxQueueTime;
-(double)adIDCacheTime;
-(char)isIdentifierForVendorCollectionEnabled;
-(char)isIAPSubscriptionNonConsumableReportEnabled;
-(char)isIAPIntroductoryOfferEnabled;
-(double)sessionDefaultMinimumInterval;
-(double)sessionDefaultTimeoutInterval;
-(double)sessionEventUserEngagementInterval;
-(int)maxTrackedCurrencies;
-(int)maxEventsStored;
-(char)isScreenViewReporterDelegateEnabled;
-(id)numberFromCacheWithKey:(id)arg1 defaultValue:(id)arg2 maxValue:(id)arg3 minValue:(id)arg4 ;
-(long long)int64ValueFromCacheWithKey:(id)arg1 defaultValue:(long long)arg2 ;
-(double)networkTimeout;
-(void)reset;
-(long long)version;
-(id)numberFromString:(id)arg1 ;
-(char)isExpired;
@end

